% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-gg.R
\name{gene2gg}
\alias{gene2gg}
\title{Gene GRangesList to ggplot2 grob}
\usage{
gene2gg(gene = NULL, tx = NULL, flatExonsByGene = NULL,
  flatExonsByTx = NULL, geneColor = "dodgerblue", labelExons = TRUE,
  exonLabelAngle = 90, exonLabelSize = 3,
  newValues = list(feature_type = "gap", subclass = "gap", gene_nameExon
  = "gap"), gene_order = c("first", "last"), return_type = c("grob",
  "df"), ref2c = NULL, hjust = 1.2, vjust = 0, compressGaps = TRUE,
  tx2geneDF = NULL, verbose = FALSE, ...)
}
\arguments{
\item{gene}{character string of the gene to plot, compared
with \code{names(flatExonsByGene)} and \code{values(flatExonsByTx)$gene_name}.}

\item{tx}{character vector of the transcripts to plot, useful
when specifying specific transcripts. Values are matched with
\code{names(flatExonsByTx)}.}

\item{flatExonsByGene, flatExonsByTx}{GRangesList objects, named
by \code{"gene_name"} or \code{"transcript_id"} respectively, containing
disjoint (non-overlapping) exons within each GRangesList
element. The data is expected to be in the form provided by
\code{flattenExonsBy()}.}

\item{geneColor}{character color used as the base color for
exons, where the color is varied for each feature type or
subclass.}

\item{labelExons}{logical indicating whether to print text
labels beneath each exon, using the values in colname
\code{"gene_nameExon"}. Typically the gene and transcripts are
named using consistent names, in which case one exon label
is placed at the bottom of the lowest transcript for each
unique exon label.}

\item{exonLabelAngle}{numeric angle in degrees (0 to 360)
indicating how to rotate exon labels, where \code{90} is
vertical, and \code{0} is horizontal.}

\item{exonLabelSize}{numeric value, compatible with
argument \code{size} in \code{ggrepel::geom_text_repel()}, used
to size exon labels when \code{labelExons=TRUE}.}

\item{newValues}{argument passed to \code{addGRLgaps()} to fill
column values for newly created gap entries. It is useful
to have \code{feature_type="gap"} so gaps have a different value
than exons. It is also useful to have \code{subclass="gap"}
when there are \code{"cds"} and \code{"noncds"} entries in the
provided \code{flatExonsByGene} data.}

\item{gene_order}{character value indicating whether the
flattened gene model should be plotted \code{"first"} above the
transcript exon models, or \code{"last"} and below the
transcript exon models.}

\item{return_type}{character value indicating whether to return
the ggplot graphic object \code{"grob"}, or the data.frame
\code{"df"} used to create the ggplot object.}

\item{ref2c}{list output from \code{make_ref2compressed()} which
contains among other things, the \code{trans_grc} data of
class \code{"trans"} used in \code{ggplot2::coord_trans()} or
\code{ggplot2::scale_x_continuous()}.}

\item{hjust, vjust}{numeric value to position exon labels
using \code{ggplot::geom_text()}.}

\item{compressGaps}{logical indicating whether to compress gaps
between exons. When \code{ref2c} is supplied, this argument is
ignored and the supplied \code{ref2c} is used directly.}

\item{tx2geneDF}{data.frame or NULL, optionally used to help
identify matching transcripts for the requested \code{gene} value,
used when \code{"gene_name"} is not present in \code{values(flatExonsByTx)}.}

\item{...}{additional arguments are passed to relevant functions
as needed, including \code{make_ref2compressed()}.}
}
\description{
Gene GRangesList to ggplot2 grob
}
\details{
This function is intended to help plot gene and transcript exon
models, and is a lightweight wrapper around \code{grl2df()}.

It takes \code{flatExonsByGene} which is the output from
\code{flattenExonsBy()}, and essentially plots the end result
for review.

Alternatively, when \code{return_type="df"}, the output is
the \code{data.frame} used to produce the ggplot, which allows
for more customization.
}
\examples{
## Assume we start with flattened gene exons
if (1 == 2) {
   ## Do not run automated examples until sample data is available

ggGria1 <- gene2gg("Gria1",
   flatExonsByGene=flatExonsByGeneCds);

## if transcript exons are available
ggGria1 <- gene2gg("Gria1",
   flatExonsByGene=flatExonsByGene,
   flatExonsByTx=flatExonsByTx);

}

}
\seealso{
Other jam plot functions: \code{\link{bgaPlotly3d}},
  \code{\link{factor2label}}, \code{\link{grl2df}},
  \code{\link{plotSashimi}}, \code{\link{prepareSashimi}},
  \code{\link{stackJunctions}}

Other jam ggplot2 functions: \code{\link{geom_diagonal_wide_arc}},
  \code{\link{plotSashimi}},
  \code{\link{splicejam-extensions}}

Other splicejam core functions: \code{\link{exoncov2polygon}},
  \code{\link{grl2df}}, \code{\link{make_ref2compressed}},
  \code{\link{plotSashimi}}, \code{\link{prepareSashimi}}
}
\concept{jam ggplot2 functions}
\concept{jam plot functions}
\concept{splicejam core functions}
