% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-tx.R
\name{annotateGRLfromGRL}
\alias{annotateGRLfromGRL}
\title{Annotate GRangesList from GRangesList objects}
\usage{
annotateGRLfromGRL(GRL1, GRL2, annoName1 = "name", annoName2 = "name",
  grlOL = NULL, addGRLnames = FALSE, returnType = c("GRL", "GR"),
  splitColname = annoName1, verbose = FALSE, ...)
}
\arguments{
\item{GRL1}{GRangesList query}

\item{GRL2}{GRangesList subject, used to add annotations to \code{GRL1}}

\item{annoName1}{character value indicating either the colname of
\code{values(GRL1)} to use as the name, or if \code{"name"} then it uses
\code{names(GRL1)}.}

\item{annoName2}{character value indicating either the colname of
\code{values(GRL2)} to use as the name, or if \code{"name"} then it uses
\code{names(GRL2)}.}

\item{grlOL}{overlap result (optional) from \code{GenomicRanges::findOverlaps()}
for these same GRangesList objects, used to save time by not re-running
\code{GenomicRanges::findOverlaps()} again.}

\item{addGRLnames}{logical indicating whether to add the names of each
GRangesList object to the output object, useful for tracking the
annotations to the source data.}

\item{returnType}{character value indicating whether to return
GRangesList "GRL" or GRange "GR" object.}

\item{splitColname}{character value used internally to indicate how
to split the resulting GRanges annotated data back to GRangesList.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{annotateGRfromGR()}.
To customize the aggregation functions, supply \code{numShrinkFunc} or
\code{stringShrinkFunc} as described in \code{annotateGRfromGR()}.}
}
\value{
GRangesList object with the same length and lengths as
the input \code{GRL1}, with annotation columns added from \code{GRL2}.
}
\description{
Annotate GRangesList from GRangesList objects
}
\details{
This function extends \code{annotateGRfromGR()} for the special case
of GRangesList objects. It requires both GRangesList objects have
identical length, and assumes both are in equivalent order.
It then restricts all overlapping annotations to those where the
query and subject are the same original GRangesList index.

This function is particularly useful following an operation on
a GRangesList object that otherwise removes all annotations in
\code{values(GRL1)}, for example \code{GenomicRanges::reduce()} or
\code{GenomicRanges::flank()}. This function can be used to re-annotate
the resulting features using the original GRangesList object.

Note that annotations are added at the level of individual GRanges
entries, equivalent to \code{values(GRL1@unlistData)}. This function does
not currently apply annotations at the GRangesList level, thus
it does not use \code{values(GRL2)} if they exist.
}
\seealso{
Other jam GRanges functions: \code{\link{addGRLgaps}},
  \code{\link{addGRgaps}}, \code{\link{annotateGRfromGR}},
  \code{\link{assignGRLexonNames}},
  \code{\link{findOverlapsGRL}},
  \code{\link{getFirstStrandedFromGRL}},
  \code{\link{sortGRL}}
}
\concept{jam GRanges functions}
