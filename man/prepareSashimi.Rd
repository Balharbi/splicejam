% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jambio-plot.R
\name{prepareSashimi}
\alias{prepareSashimi}
\title{Prepare Sashimi plot data}
\usage{
prepareSashimi(flatExonsByGene = NULL, filesDF = NULL, gene,
  sample_id = NULL, minJunctionScore = 10, gapWidth = 200,
  addGaps = TRUE, baseline = 0, compressGR = TRUE, ref2c = NULL,
  gap_feature_type = "intron", default_feature_type = "exon",
  feature_type_colname = "feature_type", exon_label_type = c("none",
  "repel", "mark"), junc_label_type = c("repel", "mark", "none"),
  return_data = c("ggCov", "ggJunc", "ggSashimi", "covDF", "juncDF",
  "ref2c", "all"), junc_color = alpha2col("goldenrod3", 0.7),
  junc_fill = alpha2col("goldenrod1", 0.4), coord_method = c("coord",
  "scale", "none"), scoreFactor = 1, verbose = FALSE, ...)
}
\arguments{
\item{flatExonsByGene}{GRangesList named by gene, whose GRanges
elements are flattened, disjoint, non-overlapping genomic ranges
per gene.}

\item{filesDF}{data.frame with columns \code{url}, \code{sample_id}, \code{type},
where: \code{url} is any valid file path or URL compatible with
\code{base::read.table()}; \code{sample_id} is an identified representing
a biological sample, used to group common files together;
\code{type} is one of \code{"bw"} for bigWig coverage, \code{"junction"} for
BED12 format splice junctions.}

\item{gene}{character string of the gene to prepare, which must be
present in \code{names(flatExonsByGene)}.}

\item{gapWidth}{numeric value of the fixed width to use for
gaps (introns) between exon features. If \code{NULL} then
\code{getGRgaps()} will use the default based upon the median exon
width.}

\item{addGaps}{logical indicating whether to include gap regions
in the coverage plot, for example including introns or intergenic
regions. When \code{compressGR=TRUE} then gaps regions are
down-sampled using running maximum signal with roughly the same
x-axis resolution as uncompressed regions.}

\item{baseline}{numeric vector named by \code{names(flatExonsByGene)}
where baseline is used to adjust the y-axis baseline position
above or below zero.}

\item{compressGR}{logical indicating whether to compress GRanges
coordinates in the output data, where gaps/introns are set
to a fixed width. When \code{ref2c} is not supplied, and
\code{compressGR=TRUE}, then \code{ref2c} is created using
\code{make_ref2compressed()}.}

\item{ref2c}{list object output from \code{make_ref2compressed()} used
to compress axis coordinates, to compress polygon coverage
data in compressed regions, and to adjust splice junction arcs
using compressed coordinates.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{make_ref2compressed()},
\code{getGRcoverageFromBw()}, \code{exoncov2polygon()}.}

\item{gapname}{the default feature_type value to use for gaps when
\code{addGaps=TRUE}.}
}
\value{
list containing \code{ggSashimi} a ggplot2 graphical object
containing a full Sashimi plot; \code{ggCov} the RNA-seq coverage
subset of the Sashimi plot; \code{ggJunc} the splice junction
subsset of the Sashimi plot; \code{ref2c} the output of
\code{make_ref2compressed()} used for ggplot2 coordinate
visualization; \code{covDF}, \code{juncDF} data.frame objects
with the raw data used to create ggplot2 objects;
\code{covGR}, \code{juncGR} the GRanges objects used to create
the data.frames; \code{gr} the GRanges object representing the
exons for the gene of interest; \code{juncLabelDF} the data.frame
containing exon label coordinates used to add labels to
the splice junction arcs.
}
\description{
Prepare Sashimi plot data
}
\details{
This function is the workhorse function used to produce
Sashimi plots, and is intended to be a convenient wrapper
function for several other individual functions.

At a minimum, a Sashimi plot requires three things:
\enumerate{
\item The gene of interest, with corresponding exon model.
\item RNA-seq coverage data.
\item Splice junction data.
}

There is some required pre-processing before running
\code{prepareSashimi()}:
\itemize{
\item Prepare flattened exons by gene using \code{flattenExonsByGene()}
and corresponding data, including \code{exonsByGene}, \code{cdsByGene},
and \code{tx2geneDF}. Verify the gene exon model data using
\code{gene2gg()}.
\item Find file paths, or web URLs, for a set of bigWig coverage
files, representing RNA-seq coverage for each strand, for
the samples of interest. Test the coverage data using
\code{getGRcoverageFromBw()} for a small set of GRanges data.
\item Find file paths, or web URLs, for a set of BED6 or BED12
format files, note that it cannot currently use bigBed format
due to limitations in the \code{rtracklayer} package.
Test the splice junction data using \code{rtracklayer::import()}
for a small range of GRanges features, then send the data
to \code{spliceGR2junctionDF()} to prepare a data.frame summary.
}

The basic input for coverage and junction data is a data.frame,
which defines each file path or url, the type of data
\code{"bw"} or \code{"junction"}, and the biological sample \code{"sample_id"}.
Any file path compatible with \code{rtracklayer::import()} will
work, including web URLs and local files. When using a web URL
you may need to use \code{"https://"} format to force the use
of secure web requests, but this requirement varies by country.
}
\examples{
# First assemble a data.frame of coverage bigWig and junction BED files
if (1 == 2) {
## Steps below will capture all replicate coverage and junction
## files for the Farris et all dataset, and although are relatively
## efficient (5-10 seconds per gene figure for 8 samples), are
## too slow to be allowed in CRAN package docs.
##
baseurl <- "https://orio.niehs.nih.gov/ucscview/farrisHub/mm10/";
bedext <- ".STAR_mm10.combinedJunctions.bed";
bwext <- c("492_1.sickle.merged.cutadapt.STAR_mm10.pos.bw",
   "492_1.sickle.merged.cutadapt.STAR_mm10.neg.bw");
c1 <- c("CA1", "CA2");
r1 <- c("CB", "DE");
bedsamples <- paste0(rep(c1, each=2), "_", r1);
bedurls <- paste0(baseurl,
   bedsamples,
   bedext);
bedurls;
bwsamples <- paste0(rep(c1, each=4), rep(r1, each=2));
bwurls <- paste0(baseurl,
   bwsamples,
   bwext);
bwurls;
filesDF <- data.frame(url=c(bedurls, bwurls),
   type=rep(c("junction", "bw"), c(4,8)),
   sample_id=gsub("_", "", c(bedsamples, bwsamples)));
filesDF;

## Next assemble exons by gene from a GTF file
if (!require(rtracklater)) {
   stop("rtracklayer is required.");
}
vM12gtf <- "ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M12/gencode.vM12.annotation.gtf.gz";
vM12gtfBase <- basename(vM12gtf);
if (!file.exists(vM12gtfBase)) {
   curl::curl_download(url=vM12gtf,
      destfile=vM12gtfBase);
}
localDb <- file.path(".", "vM12gtf.txdb");
if (!file.exists(localDb)) {
   vM12txdb <- GenomicFeatures::makeTxDbFromGFF(vM12gtfBase);
   AnnotationDbi::saveDb(x=vM12txdb, file=localDb);
} else {
   vM12txdb <- AnnotationDbi::loadDb(file=localDb);
}
exonsByTx <- GenomicFeatures::exonsBy(vM12txdb,
   by="tx",
   use.names=TRUE);
values(exonsByTx@unlistData)[,"transcript_id"] <- rep(names(exonsByTx),
   elementNROWS(exonsByTx));

## Use the GTF file to define a tx2geneDF data.frame
tx2geneDF <- makeTx2geneFromGtf(GTF=vM12gtfBase);

## Next flatten exons per gene, optionally using detectedTx
## to limit the exon models to observed transcripts.
flatExonsByGene <- flattenExonsByGene(exonsByTx=exonsByTx,
#   detectedTx=detectedTx,
   tx2geneDF=tx2geneDF);

## Finally, you can choose a gene, and any sample_id from
## filesDF$sample_id to prepare Sashimi plot data
shGria1 <- prepareSashimi(flatExonsByGene=flatExonsByGene,
   gene="Gria1",
   sample_id=c("CA2CB", "CA2DE"),
   filesDF=filesDF);

## Print the structure of data returned
jamba::sdim(shGria1);

## Of initial interest is the ggplot2 sashimi plot
print(shGria1$ggSashimi);

## You can just plot coverage
print(shGria1$ggCov);

## You can just plot junction reads
print(shGria1$ggJunc);

## For more intricate manipulations, use the data.frames
head(shGria1$covDF);
head(shGria1$juncDF);

## For kicks, the ref2c data
sdim(shGria1$ref2c)
## the shGria1$ref2c$trans_grc is usable in ggplot like this
## + trans_new(x=shGria1$ref2c$trans_grc)
## or
## + scale_x_continuous(trans=shGria1$ref2c$trans_grc)

}

}
\seealso{
Other RNA-seq functions: \code{\link{getGRcoverageFromBw}}

Other jam plot functions: \code{\link{bgaPlotly3d}},
  \code{\link{factor2label}}, \code{\link{gene2gg}},
  \code{\link{grl2df}}, \code{\link{plotSashimi}},
  \code{\link{stackJunctions}}
}
\concept{RNA-seq functions}
\concept{jam plot functions}
